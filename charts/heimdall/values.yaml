# Default values for heimdall.
# This is a YAML-formatted file.

nameOverride: ""
fullnameOverride: ""

# -- Specifies the heimdall network instance, one of: `mainnet`, `testnet`
network: mainnet

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

prometheus:
  serviceMonitors:
    # -- Enable monitoring by creating `PodMonitor` CRDs ([prometheus-operator](https://github.com/prometheus-operator/prometheus-operator))
    enabled: false
    labels: {}
    interval:
    scrapeTimeout:
    relabelings: []

grafana:
  # -- Enable creation of Grafana dashboards. [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart) must be configured to search this namespace, see `sidecar.dashboards.searchNamespace`
  dashboards: false
  # -- Must match `sidecar.dashboards.label` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabel: grafana_dashboard
  # -- Must match `sidecar.dashboards.labelValue` value for the [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)
  dashboardsConfigMapLabelValue: ""

heimdall:
  # -- Enable creation of `StatefulSet` for Heimdall
  enabled: true

  replicas: 1

  rbac:
    # -- Specifies whether RBAC resources are to be created
    create: true
    # -- Required ClusterRole rules
    # @default -- See `values.yaml`
    clusterRules:
      # Required to obtain the nodes external IP
      - apiGroups: [""]
        resources:
        - "nodes"
        verbs:
        - "get"
        - "list"
        - "watch"
    # -- Required ClusterRole rules
    # @default -- See `values.yaml`
    rules:
      # Required to get information about the serices nodePort.
      - apiGroups: [""]
        resources:
        - "services"
        verbs:
        - "get"
        - "list"
        - "watch"

  image:
    # -- Image for Heimdall
    repository: maticnetwork/heimdall
    pullPolicy: IfNotPresent
    tag: "v0.3.0" # Don't forget to update appVersion in Chart.yaml

  p2pNodePort:
    # -- Expose P2P port via NodePort
    enabled: true
    # -- NodePort to be used
    port: 31004
    initContainer:
      image:
        # -- Container image to fetch nodeport information
        repository: lachlanevenson/k8s-kubectl
        # -- Container tag
        tag: v1.21.3
        # -- Container pull policy
        pullPolicy: IfNotPresent
    portForwardContainer:
      image:
        # -- Container image for the port forwarder
        repository: alpine/socat
        # -- Container tag
        tag: latest
        # -- Container pull policy
        pullPolicy: IfNotPresent
 
  # -- Options for Heimdall rest-server sidecar
  restServer:
    extraArgs: []
    resources: {}

  # -- Additional CLI arguments to pass to Heimdall
  extraArgs: []

  fromSnapshot:
    # -- Enable initialising Heimdall from a remote Snapshot
    enabled: false
    # -- URL to snapshot to download and extract, see [here](https://snapshots.matic.today)
    snapshotUrl:
  persistence:
    # -- Uses an EmptyDir when not enabled
    enabled: false
    # -- Use an existing PVC when persistence.enabled
    existingClaim: null
    # -- Access mode for the volume claim template
    accessModes:
    - ReadWriteOnce
    # -- Requested size for volume claim template
    size: 20Gi
    # -- Use a specific storage class
    # E.g 'local-path' for local storage to achieve best performance
    # Read more (https://github.com/rancher/local-path-provisioner)
    storageClassName: null
    # -- Annotations for volume claim template
    annotations: {}
    # -- Selector for volume claim template
    selector: {}
    #   matchLabels:
    #     app.kubernetes.io/name: something
  # -- Environment variables to set in key/value format
  env:
    BOOTNODES: ""  
    ETH1_RPC_URL: "" # optional

  # -- Annotations for the `Pod`
  podAnnotations: {}

  # -- [PersistentVolumeClaimSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#persistentvolumeclaimspec-v1-core) for heimdall storage
  volumeClaimSpec:
    accessModes: ["ReadWriteOnce"]
    # -- The storage class to use when provisioning a persistent volume for heimdall
    storageClassName: 
    resources:
      requests:
        # -- The amount of disk space to provision for Heimdall
        storage: 256Gi

  # -- Pod-wide security context
  podSecurityContext:
    runAsNonRoot: false
    # runAsUser: 101337
    # runAsGroup: 101337
    # fsGroup: 101337

  # -- HTTP Port
  httpPort: 26657
  # -- Heimdall Rest  Port
  httpRest: 1317
  # -- Metrics Port
  metricsPort: 26660


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    #   ephemeral-storage: 100Mi
    # requests:
    #   cpu: 500m
    #   memory: 4Gi
    #   ephemeral-storage: 100Mi

  nodeSelector: {}

  tolerations: []

  affinityPresets:
    # -- Configure anti-affinity rules to prevent multiple Heimdall instances on the same host
    antiAffinityByHostname: true

  affinity: {}
